// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUserNotFound(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsUserNotCreate(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_CREATE.String() && e.Code == 401
}

func ErrorUserNotCreate(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_NOT_CREATE.String(), fmt.Sprintf(format, args...))
}

func IsUserNotUpdate(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_UPDATE.String() && e.Code == 401
}

func ErrorUserNotUpdate(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_NOT_UPDATE.String(), fmt.Sprintf(format, args...))
}

func IsUserNotGet(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_GET.String() && e.Code == 401
}

func ErrorUserNotGet(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_NOT_GET.String(), fmt.Sprintf(format, args...))
}

func IsUserNotDelete(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_DELETE.String() && e.Code == 401
}

func ErrorUserNotDelete(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_NOT_DELETE.String(), fmt.Sprintf(format, args...))
}

func IsUserNotList(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_LIST.String() && e.Code == 401
}

func ErrorUserNotList(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_NOT_LIST.String(), fmt.Sprintf(format, args...))
}

func IsUserPasswordError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PASSWORD_ERROR.String() && e.Code == 401
}

func ErrorUserPasswordError(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_PASSWORD_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsApiVersionNotUnsupported(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_API_VERSION_NOT_UNSUPPORTED.String() && e.Code == 403
}

func ErrorApiVersionNotUnsupported(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_API_VERSION_NOT_UNSUPPORTED.String(), fmt.Sprintf(format, args...))
}

func IsApiTokenError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_API_TOKEN_ERROR.String() && e.Code == 401
}

func ErrorApiTokenError(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_API_TOKEN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsJwtTokenMissing(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_JWT_TOKEN_MISSING.String() && e.Code == 401
}

func ErrorJwtTokenMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_JWT_TOKEN_MISSING.String(), fmt.Sprintf(format, args...))
}
